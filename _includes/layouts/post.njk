---
layout: layouts/base.njk
bodyClass: body-post
---
<article class="post" data-pagefind-body>
  <div class="post-header">
    <h1 class="post-title">{{ title }}</h1>

    <nav class="post-tags">
    {% for tag in tags %}
      <a href="/tags/{{ tag }}/" class="tag">{{ tag }}</a>
    {% endfor %}
    </nav>

    <time class="post-date" datetime="{{ date | date('DATETIME') }}">
      {{ date | date('HUMAN_DATE') }}
    </time>
  </div>

  {% if bannerImage %}
  <div>
    {{ comp.banner({ image: "/img/default-banner.jpeg" }) | safe }}
  </div>
  {% endif %}

  <div class="post-container">

    <div class="post-body">
      {{ content | safe }}
    </div>


    {% if tablecontents %}
      <div class="table-of-contents-container">
        <div class="table-of-contents">
          <h3>Table of Contents</h3>
          <hr/>
          <div class="table-of-contents-links">
            {% for content in tablecontents %}
                <a href="#{{content.id}}" >{{ content.text}}</a>
            {% endfor %}
          </div>
        </div>
    </div>
    {% endif %}

  </div>
</article>

<hr>

<nav class="post-navigation">
  <ul>
    {%- set previousPost = search.previousPage(url, "type=posts") %}
    {%- if previousPost %}
    <li>
      ← Previous: <a href="{{ previousPost.data.url }}" rel="prev">{{ previousPost.data.title }}</a>
    </li>
    {% endif %}

    {%- set nextPost = search.nextPage(url, "type=posts") %}
    {%- if nextPost %}
    <li>
      <strong>Next: <a href="{{ nextPost.data.url }}" rel="next">{{ nextPost.data.title }}</a> →</strong>
    </li>
    {% endif %}
  </ul>
</nav>

<script>
  const entriesContainer = document.querySelector('.table-of-contents-links');
  let links;



  if(entriesContainer){
    links = [ ...entriesContainer.querySelectorAll('a') ];
    const entries = links
                        .map(el => el.getAttribute('href') )
                        .map(href => document.querySelector(`${href}`));

    entries.forEach(entry => {
            const observer = new IntersectionObserver(handleIntersection, {
              root: null,    // Use the viewport as the root
              threshold: [0], // Trigger callback when the entire target is visible
            });
            observer.observe(entry);
        }); 

  }

  // Function to be called when the target element is pretty much scrolled to the top of the viewport
  function handleIntersection(entries, observer) {
      entries.forEach( (entry, idx) => {
          const targetTop = entry.boundingClientRect.top;
          const rootTop = entry.rootBounds.top;

          if (entry.isIntersecting) {
            const href = entry.target.getAttribute('id');
            const tableOfContentsLink = document.querySelector(`a[href="#${href}"]`);
            const lastActive = document.querySelector(`a:is(.active)`)
            if(lastActive){
              lastActive.classList.remove('active');
            }
            tableOfContentsLink.classList.add('active');
          }
      });
  }
</script>